
timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000a8c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000007d2  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
   8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
   c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  14:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  18:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  1c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  20:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  24:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  30:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  34:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  3c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  44:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  4c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  50:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  54:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  58:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  5c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  60:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  64:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  68:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  6c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  70:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  74:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  78:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  7c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  80:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  84:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  88:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  8c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  90:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  94:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  98:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  9c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  a0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  a4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  a8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  ac:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  b0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  b4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  b8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  bc:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  c0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  c4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  c8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  cc:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  d0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  d4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  d8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  dc:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  e0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	0e 94 94 00 	call	0x128	; 0x128 <main>
  f4:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

000000f8 <__bad_interrupt>:
  f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fc <init_timer>:
void init_timer(void)
{
    // CTC Mode

    // Setup OC4A to toggle on compare match
    TCCR4A |= _BV(COM4A0);
  fc:	e0 ea       	ldi	r30, 0xA0	; 160
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 64       	ori	r24, 0x40	; 64
 104:	80 83       	st	Z, r24
    // Setup Timer 4 prescaler to clk/8
    TCCR4B |= _BV(CS41) | _BV(WGM12);
 106:	e1 ea       	ldi	r30, 0xA1	; 161
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8a 60       	ori	r24, 0x0A	; 10
 10e:	80 83       	st	Z, r24

    // Counter
    OCR4A = 0xA000;
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 ea       	ldi	r25, 0xA0	; 160
 114:	90 93 a9 00 	sts	0x00A9, r25
 118:	80 93 a8 00 	sts	0x00A8, r24

    // Setup PH3 to output
    DDRH |= _BV(DDH3);
 11c:	e1 e0       	ldi	r30, 0x01	; 1
 11e:	f1 e0       	ldi	r31, 0x01	; 1
 120:	80 81       	ld	r24, Z
 122:	88 60       	ori	r24, 0x08	; 8
 124:	80 83       	st	Z, r24
}
 126:	08 95       	ret

00000128 <main>:

void main(void)
{
    init_timer();
 128:	0e 94 7e 00 	call	0xfc	; 0xfc <init_timer>
 12c:	ff cf       	rjmp	.-2      	; 0x12c <main+0x4>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
